<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">

   트랜잭션 로그 보기
  <logger name="org.hibernate.transaction.JDBCTransaction" level="DEBUG"/>
  <logger name="org.hibernate.jdbc.ConnectionManager" level="DEBUG"/>
  <logger name="org.springframework.orm.jpa.JpaTransactionManager" level="DEBUG"/>

  <springProperty name="MAX_HISTORY" source="practice.log.max-history" />

  <springProperty name="LOG_FILE_PATH" source="practice.log.file-path" />
  <springProperty name="LOG_FILE_NAME" source="practice.log.file-name" />

  <springProperty name="ERROR_LOG_PATH" source="practice.log.error-file-path" />
  <springProperty name="ERR_LOG_FILE_NAME" source="practice.log.error-file-name" />

  <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:- [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%logger.%method:line-%line] - %msg%n}"/>
  <property name="CONSOLE_LOG_CHARSET" value="${CONSOLE_LOG_CHARSET:-default}"/>

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
      <charset>${CONSOLE_LOG_CHARSET}</charset>
    </encoder>
  </appender>

  <appender name="FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_FILE_PATH}/${LOG_FILE_NAME}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${LOG_FILE_PATH}/app.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>1GB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <maxHistory>${MAX_HISTORY}</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
      <charset>${CONSOLE_LOG_CHARSET}</charset>
    </encoder>
  </appender>

  <appender name="LOG_ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${ERROR_LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch> <!-- 해당 레벨만 기록한다. -->
      <onMismatch>DENY</onMismatch> <!-- 다른 수준의 레벨은 기록하지 않는다.(상위 레벨도 기록 안함), 상위 수준의 레벨에 대한 기록을 원하면 ACCEPT 로 하면 기록된다. -->
    </filter>
    <!-- 롤링 정책 설정 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${ERROR_LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>1GB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <maxHistory>${MAX_HISTORY}</maxHistory>
    </rollingPolicy>
    <encoder>
      <!-- 로그 출력 형식 -->
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
      <charset>${CONSOLE_LOG_CHARSET}</charset>
    </encoder>
  </appender>

  <logger name="com.example.projectpractice" additivity="false">
    <level value="DEBUG"/>
    <appender-ref ref="STDOUT"/>
    <appender-ref ref="FILE_APPENDER"/>
    <appender-ref ref="LOG_ERROR_FILE"/>
  </logger>

  <root level="error">
    <appender-ref ref="STDOUT" />
    <appender-ref ref="LOG_ERROR_FILE"/>
  </root>

</configuration>